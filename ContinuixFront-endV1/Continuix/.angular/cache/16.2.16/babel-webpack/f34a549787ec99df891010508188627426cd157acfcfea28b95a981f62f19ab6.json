{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let LoginComponent = class LoginComponent {\n  constructor(authService, router, route, fb) {\n    this.authService = authService;\n    this.router = router;\n    this.route = route;\n    this.fb = fb;\n    this.loading = false;\n    this.errorMessage = null;\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      this.loginForm.markAllAsTouched();\n      return;\n    }\n    this.authService.clearAuthData();\n    this.loading = true;\n    this.errorMessage = null;\n    const credentials = this.loginForm.value;\n    this.authService.login(credentials).subscribe({\n      next: response => {\n        this.loading = false;\n        // 🔁 Gérer la redirection dynamique\n        const redirectUrl = this.route.snapshot.queryParamMap.get('redirect');\n        if (redirectUrl) {\n          // S'assurer que redirectUrl est valide et remplacer :id si nécessaire\n          // Supposons que notificationId est passé dans l'URL de redirection ou comme paramètre de requête\n          const notificationId = this.route.snapshot.queryParamMap.get('notificationId') || 'default-id'; // Ajustez selon la manière dont notificationId est passé\n          const resolvedUrl = redirectUrl.replace(':id', notificationId);\n          this.router.navigateByUrl(resolvedUrl);\n        } else {\n          // ✅ Revenir à la redirection basée sur le rôle\n          switch (response.role) {\n            case 'Admin':\n              this.router.navigate(['/dashboard']);\n              break;\n            case 'SECURITYAGENT':\n              this.router.navigate(['/dashboardCommun']);\n              break;\n            case 'MANAGER':\n              this.router.navigate(['/dashboardCommun']);\n              break;\n            case 'COLLABORATOR':\n              this.router.navigate(['/dashboardCommun']);\n              break;\n            default:\n              this.router.navigate(['/']);\n          }\n        }\n      },\n      error: error => {\n        this.loading = false;\n        this.errorMessage = error.message || 'Une erreur est survenue lors de la connexion.';\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}