{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const excludedUrls = ['/api/users/reset-password', '/api/users/forgot-password', '/api/auth/login', '/api/auth/logout'];\n    // Vérifie si l'URL actuelle doit être exclue\n    const shouldExclude = excludedUrls.some(url => request.url.endsWith(url));\n    if (shouldExclude) {\n      // Ne pas ajouter de header Authorization\n      console.info('🚫 Intercepteur : aucune autorisation ajoutée pour', request.url);\n      return next.handle(request);\n    }\n    const jwt = this.authService.getJwt();\n    if (jwt) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${jwt}`\n        }\n      });\n      console.log('✅ JWT ajouté à la requête DELETE :', jwt);\n    } else {\n      console.warn('⚠️ Aucun token trouvé dans localStorage');\n    }\n    return next.handle(request).pipe(catchError(err => {\n      if (err.status === 401 || err.status === 403) {\n        console.warn('⛔ Token invalide ou expiré, redirection vers /login');\n        this.authService.clearAuthData();\n        window.location.href = '/login';\n      }\n      return throwError(() => err);\n    }));\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}