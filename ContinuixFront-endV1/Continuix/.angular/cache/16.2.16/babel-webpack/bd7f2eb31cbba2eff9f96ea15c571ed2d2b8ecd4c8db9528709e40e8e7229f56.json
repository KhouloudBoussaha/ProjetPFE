{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport Swal from 'sweetalert2';\nexport let PCAComponent = class PCAComponent {\n  constructor(pcaService) {\n    this.pcaService = pcaService;\n    this.pcas = [];\n    this.newPCA = {\n      incidentType: '',\n      impact: '',\n      recommendedAction: '',\n      additionalDetails: '',\n      label: ''\n    };\n    this.editingPCA = null;\n  }\n  ngOnInit() {\n    this.loadPCAs();\n  }\n  loadPCAs() {\n    this.pcaService.getAllPCAs().subscribe({\n      next: data => {\n        this.pcas = data;\n      },\n      error: err => {\n        console.error('Erreur lors du chargement des PCA:', err);\n      }\n    });\n  }\n  createPCA() {\n    this.pcaService.addPCA(this.newPCA).subscribe({\n      next: pca => {\n        this.pcas.push(pca);\n        this.newPCA = {\n          incidentType: '',\n          impact: '',\n          recommendedAction: '',\n          additionalDetails: '',\n          label: ''\n        };\n        Swal.fire('Success', 'PCA created successfully!', 'success');\n      },\n      error: err => {\n        console.error('Erreur de crÃ©ation:', err);\n        Swal.fire('Error', 'Failed to create PCA.', 'error');\n      }\n    });\n  }\n  editPCA(pca) {\n    this.editingPCA = {\n      ...pca\n    };\n    setTimeout(() => {\n      this.modalInstance = new bootstrap.Modal(this.editModal.nativeElement);\n      this.modalInstance.show();\n    });\n  }\n  updatePCA() {\n    if (this.editingPCA?.id) {\n      this.pcaService.updatePCA(this.editingPCA.id, this.editingPCA).subscribe({\n        next: () => {\n          this.loadPCAs();\n          this.closeModal();\n          Swal.fire('Success', 'PCA updated successfully!', 'success');\n        },\n        error: err => {\n          console.error('Erreur de modification:', err);\n          Swal.fire('Error', 'Failed to update PCA.', 'error');\n        }\n      });\n    }\n  }\n  deletePCA(id) {\n    Swal.fire({\n      title: 'Are you sure? ?',\n      text: 'This action cannot be undone.',\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it',\n      cancelButtonText: 'Cancel'\n    }).then(result => {\n      if (result.isConfirmed) {\n        this.pcaService.deletePCA(id).subscribe({\n          next: () => {\n            this.pcas = this.pcas.filter(p => p.id !== id);\n            Swal.fire('Deleted', 'PCA has been deleted.', 'success');\n          },\n          error: err => {\n            console.error('Erreur de suppression:', err);\n            Swal.fire('Erreur', 'Impossible de supprimer la PCA.', 'error');\n          }\n        });\n      }\n    });\n  }\n  closeModal() {\n    this.modalInstance?.hide();\n    this.editingPCA = null;\n  }\n};\n__decorate([ViewChild('editModal')], PCAComponent.prototype, \"editModal\", void 0);\nPCAComponent = __decorate([Component({\n  selector: 'app-pca',\n  templateUrl: './pca.component.html',\n  styleUrls: ['./pca.component.css']\n})], PCAComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}