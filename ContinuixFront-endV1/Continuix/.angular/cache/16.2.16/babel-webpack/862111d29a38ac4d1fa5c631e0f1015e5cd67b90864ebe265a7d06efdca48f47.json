{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PcaService = /*#__PURE__*/(() => {\n  class PcaService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:8075/api/pca';\n    }\n    getAllPCAs() {\n      return this.http.get(this.apiUrl);\n    }\n    addPCA(pca, groupName) {\n      return this.http.post(`${this.apiUrl}?groupName=${encodeURIComponent(groupName)}`, pca).pipe(catchError(this.handleError));\n    }\n    updatePCA(id, pca, groupName) {\n      return this.http.put(`${this.apiUrl}/${id}?groupName=${encodeURIComponent(groupName)}`, pca).pipe(catchError(this.handleError));\n    }\n    deletePCA(id) {\n      return this.http.delete(`${this.apiUrl}/${id}`);\n    }\n    getPCAByIncidentTypeAndImpact(incidentType, impact) {\n      return this.http.get(`${this.apiUrl}/recommend?incidentType=${encodeURIComponent(incidentType)}&impact=${encodeURIComponent(impact)}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      let errorMessage = 'Une erreur est survenue';\n      if (error.status === 404) {\n        errorMessage = 'Ressource non trouvée (PCA ou groupe)';\n      } else if (error.status === 400) {\n        errorMessage = error.error || 'Requête invalide';\n      }\n      return throwError(() => new Error(errorMessage));\n    }\n    simulatePca(request) {\n      return this.http.post(`${this.apiUrl}/simulate`, request);\n    }\n    static {\n      this.ɵfac = function PcaService_Factory(t) {\n        return new (t || PcaService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: PcaService,\n        factory: PcaService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return PcaService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}