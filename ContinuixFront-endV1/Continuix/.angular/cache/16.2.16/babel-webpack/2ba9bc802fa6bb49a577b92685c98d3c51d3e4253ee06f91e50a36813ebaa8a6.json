{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/pca.component.ts\nimport { Component, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport { Impact } from '../impact';\nimport { IncidentType } from '../incident-type';\nexport let PCAComponent = class PCAComponent {\n  constructor(pcaService, groupService, fb) {\n    this.pcaService = pcaService;\n    this.groupService = groupService;\n    this.fb = fb;\n    this.pcas = [];\n    this.groups = [];\n    this.editingPCA = null;\n    this.incidentTypes = Object.values(IncidentType);\n    this.impacts = Object.values(Impact);\n    this.pcaForm = this.fb.group({\n      incidentType: ['', Validators.required],\n      impact: ['', Validators.required],\n      recommendedAction: ['', Validators.required],\n      additionalDetails: [''],\n      groupName: ['', Validators.required]\n    });\n    this.editForm = this.fb.group({\n      incidentType: ['', Validators.required],\n      impact: ['', Validators.required],\n      recommendedAction: ['', Validators.required],\n      additionalDetails: [''],\n      groupName: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.loadPCAs();\n    this.loadGroups();\n  }\n  loadPCAs() {\n    this.pcaService.getAllPCAs().subscribe({\n      next: data => {\n        this.pcas = data;\n      },\n      error: err => {\n        Swal.fire('Erreur', 'Erreur lors du chargement des PCA: ' + err.message, 'error');\n      }\n    });\n  }\n  loadGroups() {\n    this.groupService.getAllGroups().subscribe({\n      next: data => {\n        this.groups = data;\n      },\n      error: err => {\n        Swal.fire('Erreur', 'Erreur lors du chargement des groupes: ' + err.message, 'error');\n      }\n    });\n  }\n  createPCA() {\n    if (this.pcaForm.valid) {\n      const pca = {\n        incidentType: this.pcaForm.value.incidentType,\n        impact: this.pcaForm.value.impact,\n        recommendedAction: this.pcaForm.value.recommendedAction,\n        additionalDetails: this.pcaForm.value.additionalDetails\n      };\n      this.pcaService.addPCA(pca, this.pcaForm.value.groupName).subscribe({\n        next: pca => {\n          this.pcas.push(pca);\n          this.pcaForm.reset();\n          Swal.fire('Succès', 'PCA créé avec succès !', 'success');\n        },\n        error: err => {\n          Swal.fire('Erreur', 'Erreur lors de la création du PCA: ' + err.message, 'error');\n        }\n      });\n    }\n  }\n  editPCA(pca) {\n    this.editingPCA = {\n      ...pca\n    };\n    this.editForm.patchValue({\n      incidentType: pca.incidentType,\n      impact: pca.impact,\n      recommendedAction: pca.recommendedAction,\n      additionalDetails: pca.additionalDetails,\n      groupName: pca.groupe?.name || ''\n    });\n    setTimeout(() => {\n      this.modalInstance = new bootstrap.Modal(this.editModal.nativeElement);\n      this.modalInstance.show();\n    });\n  }\n  updatePCA() {\n    if (this.editingPCA?.id && this.editForm.valid) {\n      const pca = {\n        id: this.editingPCA.id,\n        incidentType: this.editForm.value.incidentType,\n        impact: this.editForm.value.impact,\n        recommendedAction: this.editForm.value.recommendedAction,\n        additionalDetails: this.editForm.value.additionalDetails\n      };\n      this.pcaService.updatePCA(this.editingPCA.id, pca, this.editForm.value.groupName).subscribe({\n        next: () => {\n          this.loadPCAs();\n          this.closeModal();\n          Swal.fire('Succès', 'PCA modifié avec succès !', 'success');\n        },\n        error: err => {\n          Swal.fire('Erreur', 'Erreur lors de la modification du PCA: ' + err.message, 'error');\n        }\n      });\n    }\n  }\n  deletePCA(id) {\n    Swal.fire({\n      title: 'Êtes-vous sûr ?',\n      text: 'Cette action est irréversible.',\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Oui, supprimer',\n      cancelButtonText: 'Annuler'\n    }).then(result => {\n      if (result.isConfirmed) {\n        this.pcaService.deletePCA(id).subscribe({\n          next: () => {\n            this.pcas = this.pcas.filter(p => p.id !== id);\n            Swal.fire('Supprimé', 'PCA supprimé avec succès.', 'success');\n          },\n          error: err => {\n            Swal.fire('Erreur', 'Erreur lors de la suppression: ' + err.message, 'error');\n          }\n        });\n      }\n    });\n  }\n  closeModal() {\n    this.modalInstance?.hide();\n    this.editingPCA = null;\n    this.editForm.reset();\n  }\n};\n__decorate([ViewChild('editModal')], PCAComponent.prototype, \"editModal\", void 0);\nPCAComponent = __decorate([Component({\n  selector: 'app-pca',\n  templateUrl: './pca.component.html',\n  styleUrls: ['./pca.component.css']\n})], PCAComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}